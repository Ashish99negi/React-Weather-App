{"version":3,"sources":["logo.svg","app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","placeholder","name","autoComplete","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3014cacf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n\r\nconst Weather = props =>{\r\nreturn (\r\n    <div className=\"container text-light\">\r\n        <div className=\"container\">\r\n            <div className=\"cards pt-4\">\r\n            <h1>{props.city}</h1>\r\n            <h5 className=\"py-4\">\r\n                <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n            </h5>\r\n            \r\n            {props.temp_celsius ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>):null}\r\n\r\n            {/* show max and mi n temp*/}\r\n            {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n            <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n};\r\n\r\nfunction minmaxTemp(min,max){\r\n   if(min && max){\r\n    return(\r\n        <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n    );\r\n}\r\n}\r\n\r\n\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport \"./form.style.css\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"container\">\r\n    <div>{props.error ? error() : null}</div>\r\n      \r\n       <form onSubmit={props.loadweather}> \r\n       <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"City\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"City\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Country\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 py-2 text-md-left \">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n       </form>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Form;","import logo from './logo.svg';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css';\n\nimport'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from\"./app_component/weather.component\";\nimport React from 'react';\nimport Form from './app_component/form.component';\n\n//api call api.openweathermap.org/data/2.5/weather?q=London,uk\n\nconst API_key =\"6b8c5fddda8d8bc4320fa90b065def0d\"\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    \n\n    this.weatherIcon= {\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\" \n    }\n  }\n\n  calCelsius(temp){\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons,rangeId){\n    switch(true){\n      case rangeId >=200&& rangeId <=232:\n        this.setState({icon:this.weatherIcon.Thunderstorm});\n        break;\n\n      case rangeId >=300&& rangeId <=321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n        \n      case rangeId >=500&& rangeId <=531:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;\n\n      case rangeId >=600&& rangeId <=622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n\n      case rangeId >=701&& rangeId <=781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n        break;\n\n      case rangeId === 800:\n        this.setState({icon:this.weatherIcon.Clear});\n        break;\n\n      case rangeId >=801&& rangeId <=804:\n        this.setState({icon:this.weatherIcon.Clouds});\n        break;\n        default:\n          this.setState({icon:this.weatherIcon.Clouds});\n    }\n  }\n\n  getWeather = async (e) =>{\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if(city && country){\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n        );\n      \n    const response = await api_call.json();\n\n    console.log(response);\n\n    this.setState({\n      city:`${response.name},${response.sys.country}`,\n      celsius: this.calCelsius(response.main.temp),\n      temp_max:this.calCelsius(response.main.temp_max),\n      temp_min:this.calCelsius(response.main.temp_min),\n      description: response.weather[0].description,\n      error:false\n    });\n\n    this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n  }else{\n    this.setState({error : true});\n  }\n  };\n  render(){\n    return (\n      <div className=\"App\">\n      <Form loadweather={this.getWeather} error={this.state.error}/>\n     <Weather\n      city={this.state.city}\n       country={this.state.country}\n       temp_celsius={this.state.celsius}\n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description} \n        weatherIcon={this.state.icon}\n       />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}